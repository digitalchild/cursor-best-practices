---
description: 
globs: 
alwaysApply: false
---
# FastAPI Project

## Key Principles

- Write clear, technical responses with precise FastAPI examples.
- Use FastAPI's built-in features and tools wherever possible to leverage its full capabilities.
- Prioritize readability and maintainability; follow PEP 8 compliance.
- Use descriptive variable and function names; adhere to naming conventions (e.g., lowercase with underscores for functions and variables).
- Structure your project in a modular way using routers to promote reusability and separation of concerns.

## Project Structure

  Structure the project files as follows:

  ```plaintext
  my_fastapi_project/
  ├── app/
  │   ├── __init__.py
  │   ├── main.py             # Application entry point
  │   ├── dependencies.py     # Dependency injection
  │   ├── routers/            # API routers
  │   │   ├── __init__.py
  │   │   └── example.py      # Example router
  │   ├── models/             # Data models
  │   │   ├── __init__.py
  │   │   └── example.py      # Example model
  │   ├── schemas/            # Pydantic models
  │   │   ├── __init__.py
  │   │   └── example.py      # Example schema
  │   ├── crud/               # CRUD operations
  │   │   ├── __init__.py
  │   │   └── example.py      # Example CRUD
  │   ├── core/               # Core settings and configurations
  │   │   ├── __init__.py
  │   │   └── config.py       # Configuration settings
  │   ├── tests/              # Unit tests
  │   │   ├── __init__.py
  │   │   └── test_example.py # Example test
  ├── requirements.txt        # Python package dependencies
  └── README.md               # Project documentation
  ```

## Tech Stack

- Python 3.10+
- FastAPI
- SQLAlchemy (for ORM)
- Alembic (for database migrations)
- Pydantic (for data validation)
- Uvicorn (for ASGI server)
- PostgreSQL

## Naming Conventions

- Follow PEP 8 naming conventions
- Use lowercase with underscores for functions and variables
- Class names should use CamelCase
- Constants should be uppercase with underscores

## FastAPI/Python Usage

- Use FastAPI's dependency injection system for managing dependencies.
- Leverage Pydantic models for request validation and serialization.
- Use SQLAlchemy for database interactions; prefer ORM over raw SQL queries.
- Structure your application using routers for modularity.
- Use background tasks for long-running operations.

## Error Handling and Validation

- Implement error handling using FastAPI's exception handlers.
- Use Pydantic for data validation.
- Prefer try-except blocks for handling exceptions in business logic.
- Customize error responses to improve user experience.

## Testing

- Use FastAPI's built-in testing utilities with pytest.
- Write unit tests for routers, models, and schemas.
- Use integration tests for critical workflows.

## Security

- Apply FastAPI's security best practices (e.g., OAuth2, JWT).
- Use CORS middleware for cross-origin requests.
- Implement rate limiting and input validation to prevent abuse.

## Performance Optimization

- Use FastAPI's async capabilities for I/O-bound operations.
- Optimize query performance using SQLAlchemy's eager loading.
- Use caching strategies to reduce database load.

## Git Usage

- Use clear and descriptive commit messages.
- Follow a consistent branching strategy (e.g., Git Flow).

## Documentation and Comments

- Maintain clear README with setup instructions and requirements.
- Use docstrings for classes, methods, and functions.
- Add inline comments only for complex logic explaining "why" not "what".
- Document API endpoints and data models.

## Development Workflow

- Use virtual environments for dependency management.
- Implement PEP 8 checks.
- Run automated tests.
- Follow semantic versioning.

## CI/CD

- Use GitHub Actions or similar for:
  - Code linting
  - Running tests
  - Automated deployments
  - Security checks
